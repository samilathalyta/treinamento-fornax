/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.fornax.samila.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import br.com.fornax.samila.type.SeguroType;
import br.com.fornax.samila.type.TipoType;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-01-18T18:39:32.283Z")

@Validated
@Api(value = "seguro", description = "the seguro API")
@RequestMapping(value = "/v1")
public interface SeguroApi {

	@ApiOperation(value = "Atualizar seguro", nickname = "atualizarSeguros", notes = "Atualizar seguro no banco de dados", response = SeguroType.class, tags = {
			"seguro", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = SeguroType.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Segurado not found") })
	@RequestMapping(value = "/seguro", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<SeguroType> atualizarSeguros(
			@ApiParam(value = "", required = true) @Valid @RequestBody SeguroType body);

	@ApiOperation(value = "Consultar seguro", nickname = "consultarPorProposta", notes = "Consultar segurado por proposta", response = SeguroType.class, responseContainer = "List", tags = {
			"seguro", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = TipoType.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Seguro not found") })
	@RequestMapping(value = "/seguro/{proposta}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<SeguroType> consultarPorProposta(
			@ApiParam(value = "Id da proposta", required = true) @PathVariable("proposta") @Valid Integer proposta);

	@ApiOperation(value = "Consultar seguro", nickname = "consultarSeguros", notes = "Consultar segurado por proposta", response = SeguroType.class, responseContainer = "List", tags = {
			"seguro", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = TipoType.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Seguro not found") })
	@RequestMapping(value = "/seguro", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<SeguroType>> consultarTodos();

	@ApiOperation(value = "Deletar seguro", nickname = "deletarSeguros", notes = "Deletar seguro por cpf", response = SeguroType.class, tags = {
			"seguro", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = SeguroType.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Segurado not found") })
	@RequestMapping(value = "/seguro/{idSeguro}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deletarSeguros(
			@ApiParam(value = "Id do tipo", required = true) @PathVariable("idSeguro") Integer idSeguro);

	@ApiOperation(value = "Salvar seguro", nickname = "salvarSeguros", notes = "Salvar seguro no banco de dados", response = SeguroType.class, tags = {
			"seguro", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = SeguroType.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Seguro not found") })
	@RequestMapping(value = "/seguro", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<SeguroType> salvarSeguros(@ApiParam(value = "") @Valid @RequestBody SeguroType body);

}
