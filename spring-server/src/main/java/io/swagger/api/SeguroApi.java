/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Tipo;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-01-18T18:39:32.283Z")

@Validated
@Api(value = "seguro", description = "the seguro API")
@RequestMapping(value = "/treinamento/v1")
public interface SeguroApi {

    @ApiOperation(value = "Atualizar seguro", nickname = "atualizarSeguro", notes = "Atualizar seguro no banco de dados", response = Tipo.class, tags={ "seguro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tipo.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Segurado not found") })
    @RequestMapping(value = "/seguro",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Tipo> atualizarSeguro(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Tipo body);


    @ApiOperation(value = "Consultar seguro", nickname = "consultarSeguro", notes = "Consultar segurado por proposta", response = Tipo.class, tags={ "seguro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tipo.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Seguro not found") })
    @RequestMapping(value = "/seguro/{proposta}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Tipo> consultarSeguro(@ApiParam(value = "Porposta do seguro",required=true) @PathVariable("proposta") Integer proposta);


    @ApiOperation(value = "Deletar seguro", nickname = "deletarSeguro", notes = "Deletar seguro por cpf", response = Tipo.class, tags={ "seguro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tipo.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Segurado not found") })
    @RequestMapping(value = "/seguro",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Tipo> deletarSeguro(@ApiParam(value = "cpf do segurado" ,required=true) @RequestHeader(value="proposta", required=true) Integer proposta);


    @ApiOperation(value = "Salvar seguro", nickname = "salvarSeguro", notes = "Salvar seguro no banco de dados", response = Tipo.class, tags={ "seguro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tipo.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Seguro not found") })
    @RequestMapping(value = "/seguro",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Tipo> salvarSeguro(@ApiParam(value = ""  )  @Valid @RequestBody Tipo body);

}
